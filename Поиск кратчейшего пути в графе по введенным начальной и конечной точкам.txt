graph = {
'a':{'e':5.9,'b':2.6},
'b':{'a':2.6,'e':1.1,'d':3.3,'c':1.7},
'c':{'d':5.8,'b':1.7},
'd':{'e':2.1,'b':3.3,'c':5.8,'f':5.2},
'e':{'a':5.9,'b':1.1,'d':2.1},
'f':{'d':7.0}
} #создали матрицу путей

print("Введите начальную точку")
nachalo=input('')  #вводится начало пути
print("Введите конечную точку")
konec=input('')  #вводится конец пути
def otvet(graph,nachalo,konec):  #введем функцию поиска пути. На вход она получает значения из переменных graph и введёных с клавиатуры nachalo, konec   
    KorotkijPut = {}  #пустые массивы для дальнейших манипуляций
    Do = {}
    # EsheNeProjndennijYzel - переменная, используемая далее в циклах для узлов, которые программа еще не брала во внимание
    EsheNeProjdennijYzel = graph #присваиваем значения матрицы путей в переменной EsheNeProjdennijYzel
    Infinit = float("inf")  #присваиваем "бесконечную" переменную для дальнейшего сравнениях в целях поиска меньшего значения (иначе не ясно, что определить за максимум)
    for yzel in EsheNeProjdennijYzel:  #заполняем ячейки массива значениями переменной Infinit
        KorotkijPut[yzel] = Infinit 
    KorotkijPut[nachalo] = 0 #добавляем 0 в ячейку начала пути

    while EsheNeProjdennijYzel: #цикл до тех пор, пока существуют еще не задействованные узлы
        MinYzel = None #в узел с минимальным ребром добавляем пустоту, чтобы новый проход цикла не "отвлекался" на полученные ранее значения
        for yzel in EsheNeProjdennijYzel: #Если существует непройденный узел, то в результате работы в MinYzel помещается значение узла с минимальным ребром
            if MinYzel is None:
                MinYzel =yzel
            else:
                if KorotkijPut[yzel] < KorotkijPut[MinYzel]:
                    MinYzel =yzel
        for SledyyshijYzel, weight in graph[MinYzel].items(): #цикл для оценки суммы путей до текущего узла. В результате работы получаем значение узла с минимальным ребром и, как следствие, минимальной суммой
            if weight + KorotkijPut[MinYzel] < KorotkijPut[SledyyshijYzel]: #проверяется сумма путей со следующим узлом, в который МОЖНО прийти
                KorotkijPut[SledyyshijYzel] = weight + KorotkijPut[MinYzel]
                Do[SledyyshijYzel] = MinYzel #запоминаем найденный узел с текущей минимальной суммой ребер
        EsheNeProjdennijYzel.pop(MinYzel) #убираем из массива не пройденных узлов текущий узел, чтобы ускорить работу программы
    OtvetPut = [] #пустой массив для окончательного пути (кратчайший)
    CurrentYzel = konec #В момент окончания всех циклов, присваиваем текущему узлу значение конечной точки
    while CurrentYzel != nachalo: #цикл идёт в обратную сторону - с конца - и до начала
        OtvetPut.insert(0,CurrentYzel) #в окончательный путь добавляется найденный узел с минимальным ребром
        CurrentYzel = Do[CurrentYzel] #"шаг назад" - объявляем текущим узлом предыдущий найденный узел с минимальным ребром
    OtvetPut.insert(0,nachalo) #добавляем в самую первую ячейку окончательного пути начальный, введенный с клавиатуры, узел
    print('Самый короткий путь')
    print(str(OtvetPut)) #вывод ответа в виде узлов
    print('Расстояние')
    print(KorotkijPut[konec]) #вывод длины пути

otvet(graph, nachalo, konec) #основная часть программы, состоящая из вызова функции


